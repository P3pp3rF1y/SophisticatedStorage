plugins {
    id 'idea'
    id "org.sonarqube" version "4.3.1.3277"
    id "maven-publish"
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "net.darkhax.curseforgegradle" version "1.1.15"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

if (findProject(':SophisticatedCore') != null) {
    evaluationDependsOn(':SophisticatedCore')
}

repositories {
    mavenCentral()
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.dev/" }
    maven { url "https://minecraft.curseforge.com/api/maven/"}
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.blamejared.com/" }
    maven {
        name = "GHPCore"
        url = uri("https://maven.pkg.github.com/p3pp3rf1y/sophisticatedcore")
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("READ_PACKAGES_TOKEN")
        }
        content {
            includeGroupByRegex "sophisticatedcore.*"
        }
    }
    maven {
        name = "GHPBackpacks"
        url = uri("https://maven.pkg.github.com/p3pp3rf1y/sophisticatedbackpacks")
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("READ_PACKAGES_TOKEN")
        }
        content {
            includeGroupByRegex "sophisticatedbackpacks.*"
        }
    }
}

group = mod_group_id
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: 'parchment', version: "$parchment_version"
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property "mixin.env.disableRefMap", "true"
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
        }
        server {
        }
        data {
            property 'fml.earlyprogresswindow', 'false'
            mods {
                if (findProject(':SophisticatedCore') != null) {
                    SophisticatedCore {
                        source project(':SophisticatedCore').sourceSets.main
                    }
                }
                if (findProject(':SophisticatedBackpacks') != null) {
                    SophisticatedBackpacks {
                        source project(':SophisticatedBackpacks').sourceSets.main
                    }
                }
            }
            args '--mod', 'sophisticatedstorage', '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    compileOnly fg.deobf("curse.maven:rubidium-574856:${rubidium_cf_file_id}")
    compileOnly fg.deobf("curse.maven:jade-324717:${jade_cf_file_id}")
    compileOnly fg.deobf("curse.maven:chipped-456956:${chipped_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:chipped-456956:${chipped_cf_file_id}")
    compileOnly fg.deobf("curse.maven:athena-841890:${athena_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:athena-841890:${athena_cf_file_id}")
    compileOnly fg.deobf("curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}")

    compileOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    compileOnly fg.deobf("curse.maven:zeta-968868:${zeta_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:zeta-968868:${zeta_cf_file_id}")

    if (findProject(':SophisticatedCore') != null) {
        implementation project(':SophisticatedCore')
        testImplementation project(':SophisticatedCore')
    } else {
        implementation fg.deobf("sophisticatedcore:sophisticatedcore:${sc_version}") {
            transitive = false
        }
        testImplementation fg.deobf("sophisticatedcore:sophisticatedcore:${sc_version}") {
            transitive = false
        }
    }
    if (findProject(':SophisticatedBackpacks') != null) {
        implementation project(':SophisticatedBackpacks')
        testImplementation project(':SophisticatedBackpacks')
    } else {
        implementation fg.deobf("sophisticatedbackpacks:sophisticatedbackpacks:${sb_version}") {
            transitive = false
        }
        testImplementation fg.deobf("sophisticatedbackpacks:sophisticatedbackpacks:${sb_version}") {
            transitive = false
        }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.+'
    testImplementation "org.mockito:mockito-core:5.1.+"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named('jar', Jar).configure {
    from('/') {
        include 'LICENSE'
    }

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "p3pp3rf1y",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "p3pp3rf1y",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_version: mod_version,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}",
            sc_version          : sc_version.substring(sc_version.indexOf("-") + 1, sc_version.lastIndexOf(',')) + ".+"
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if (System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev")) {
        return "-SNAPSHOT"
    }
    return ""
}

tasks.named('publish').configure {
    dependsOn 'reobfJar'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("${github_package_url}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = mod_id
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${mod_id}"
        property "sonar.projectKey", "${sonar_project_key}"
    }
}

task generateChangelog {
    def changelog = new StringBuilder()

    // Function to remove characters with Unicode code points 129 or higher
    def removeHighUnicodeChars = { text ->
        text.replaceAll(/[\u0081-\uFFFF]/, '')
    }

    // Function to format commit messages with nesting
    def formatMultilineMessage = { message ->
        // Split message by lines, trim whitespace, and create formatted list
        def lines = message.split('\n')
        def formattedMessage = lines[0].trim() // First line as top-level list item
        if (lines.size() > 1) {
            formattedMessage += "\n" + lines[1..-1].collect { line ->
                // Trim the line and remove leading dash if present
                def trimmedLine = line.trim()
                if (trimmedLine.startsWith('-')) {
                    trimmedLine = trimmedLine.substring(1).trim()
                }
                "    - ${trimmedLine}" // Nested list for additional lines
            }.join('\n')
        }
        return formattedMessage
    }

    // Function to remove [DEV] section from commit message
    def removeDevSection = { message ->
        def devIndex = message.indexOf('[DEV]')
        if (devIndex != -1) {
            return message.substring(0, devIndex).trim()
        }
        return message
    }

    // Get the latest commit hash
    def latestCommitHash = "git rev-parse HEAD".execute().text.trim()

    // Check if the latest commit is a merge commit
    def parentCommits = "git rev-list --parents -n 1 ${latestCommitHash}".execute().text.split()

    def commitMessages = []
    if (parentCommits.size() > 2) { // Merge commit has more than 2 parents
        def firstParent = parentCommits[1]
        def secondParent = parentCommits[2]
        def gitLogCommand = [
                "bash", "-c", "git log --pretty=format:%B ${firstParent}..${secondParent}"
        ]
        commitMessages = gitLogCommand.execute().text.split('\n\n')  // Split by two newlines for each commit
    } else {
        // Single commit log
        commitMessages = "git log -1 --pretty=%B".execute().text.split('\n\n')  // Split by two newlines for each commit
    }

    def features = []
    def fixes = []

    commitMessages.each { commitMessage ->
        commitMessage = removeHighUnicodeChars(commitMessage) // Remove high Unicode characters
        commitMessage = removeDevSection(commitMessage) // Remove [DEV] section

        if (commitMessage.startsWith('feat: ')) {
            features.add(commitMessage.replaceFirst('feat: ', '').trim())
        } else if (commitMessage.startsWith('fix: ')) {
            fixes.add(commitMessage.replaceFirst('fix: ', '').trim())
        }
    }

    if (features) {
        changelog.append("### Features\n")
        features.each { feature -> changelog.append("- ${formatMultilineMessage(feature)}\n") }
    }

    if (fixes) {
        changelog.append("### Fixes\n")
        fixes.each { fix -> changelog.append("- ${formatMultilineMessage(fix)}\n") }
    }

    // Store the changelog in a project property or an environment variable
    project.ext.changelog = changelog.toString()
    println(changelog.toString())
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn 'generateChangelog'

    debugMode = true
    apiToken = System.getenv("CURSEFORGE_TOkEN")
    def mainFile = upload(project.curseforge_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = project.ext.changelog
    mainFile.addModLoader('NeoForge')
    mainFile.addModLoader('Forge')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile
    mainFile.addRequirement('sophisticated-core')
    mainFile.addOptional('jei')
    mainFile.addOptional('crafting-tweaks')
    onlyIf { !project.ext.changelog.isEmpty() }
}

task printVersionName {
  println "version:" + project.version
}

