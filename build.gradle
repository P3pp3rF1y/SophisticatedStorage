buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
    }
}

plugins {
    id "org.sonarqube" version "3.3"
    id "maven-publish"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'idea'

repositories {
    mavenCentral()
    maven { url "https://dvs1.progwml6.com/files/maven" }
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.dev/" }
    maven { url "https://minecraft.curseforge.com/api/maven/"}
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.blamejared.com/" }
}

group = 'sophisticatedstorage'
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
archivesBaseName = 'sophisticatedstorage'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: 'parchment', version: "$parchment_version"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property "mixin.env.disableRefMap", "true"
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                sophisticatedstorage {
                    source sourceSets.main
                }
            }
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property "mixin.env.disableRefMap", "true"
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            mods {
                sophisticatedstorage {
                    source sourceSets.main
                }
            }
        }
        data {
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property "mixin.env.disableRefMap", "true"
            //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            mods {
                if (findProject(':SophisticatedCore') != null) {
                    SophisticatedCore {
                        source project(':SophisticatedCore').sourceSets.main
                    }
                }
                sophisticatedstorage {
                    source sourceSets.main
                }
            }
            args '--mod', 'sophisticatedstorage', '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")
    compileOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    compileOnly fg.deobf("curse.maven:autoreglib-250363:${autoreglib_cf_file_id}")
    //runtimeOnly fg.deobf("curse.maven:quark-243121:${quark_cf_file_id}")
    //runtimeOnly fg.deobf("curse.maven:autoreglib-250363:${autoreglib_cf_file_id}")

    if (findProject(':SophisticatedCore') != null) {
        implementation project(':SophisticatedCore')
    } else {
        compileOnly fg.deobf("curse.maven:sophisticatedcore-618298:${sc_cf_file_id}")
        runtimeOnly fg.deobf("curse.maven:sophisticatedcore-618298:${sc_cf_file_id}")
    }
}

test {
    useTestNG()
}

task generateSources(type: Copy) {
    from 'src/replaceme/java'
    into "$buildDir/generated-src"
    filter { line -> line.replaceAll('@MOD_VERSION@', '${project.version}') }
}

jar {
    from('/') {
        include 'LICENSE'
    }

    manifest {
        attributes(["Specification-Title"     : "sophisticatedstorage",
                    "Specification-Vendor"    : "p3pp3rf1y",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${project.version}",
                    "Implementation-Vendor"   : "p3pp3rf1y",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if ((System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev"))) {
        return "-alpha"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/P3pp3rF1y/SophisticatedStorage")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'sophisticatedstorage'
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "sophisticatedstorage"
        property "sonar.projectKey", "sophisticatedstorage:SophisticatedStorage"
    }
}

